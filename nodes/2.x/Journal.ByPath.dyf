{
  "Uuid": "77141d35-29af-4172-ab94-7d688a42917b",
  "IsCustomNode": true,
  "Category": "Journalysis.Create",
  "Description": "Creates a queryable object from the contents of a Revit journal file",
  "Name": "Journal.ByPath",
  "ElementResolver": {
    "ResolutionMap": {
      "File": {
        "Key": "DSCore.IO.File",
        "Value": "DSCoreNodes.dll"
      },
      "System.IO.FileInfo": {
        "Key": "System.IO.FileInfo",
        "Value": ""
      },
      "List.Empty": {
        "Key": "DSCore.List",
        "Value": "DSCoreNodes.dll"
      }
    }
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nimport sys\r\nsys.path.append(\"C:\\Program Files (x86)\\IronPython 2.7\\Lib\")\r\nimport os\r\nimport time\r\n\r\nclass Journal:\r\n\tdef __init__(self, lines, version, username, blockcount, path, build, branch, machinename, osversion):\r\n\t\tself.Lines = lines\r\n\t\tself.LineCount = len(lines)\r\n\t\tself.Version = version\r\n\t\tself.User = username\t\r\n\t\tself.BlockCount = blockcount\r\n\t\tself.Path = path\r\n\t\tself.Build = build\r\n\t\tself.Branch = branch\r\n\t\tself.Machine = machinename\r\n\t\tself.OSVersion = osversion\r\n\t\tself.ProcessingTime = None\r\n\tdef __repr__(self):\r\n\t\treturn 'Journal'\r\n\tdef ContainsAPIErrors(self):\r\n\t\tif len([x for x in self.GetLinesByTypeAndProperty('JournalAPIMessage', 'IsError', True)]) > 0: return True\r\n\t\telse: return False\r\n\tdef ContainsExceptions(self):\r\n\t\tif len([x for x in self.GetLinesByType('JournalTimeStamp') if x.Description.startswith(\"ExceptionCode\")]) > 0: return True\r\n\t\telse: return False\r\n\tdef GetDate(self):\r\n\t\treturn self.GetDateTimeByBlock(1).Date\r\n\tdef GetDateTimeByBlock(self, block):\r\n\t\tif block == 0: return None\r\n\t\telse: return [x for x in self.GetLinesByType('JournalTimeStamp') if x.Block == block][0].DateTime\r\n\tdef GetDateTimeByBlocks(self, blocks):\r\n\t\tif 0 in blocks: return None\r\n\t\telse: return [x.DateTime for x in self.GetLinesByType('JournalTimeStamp') if x.Block in blocks]\r\n\tdef GetFirstLines(self, number):\r\n\t\treturn self.Lines[:number]\r\n\tdef GetLastLines(self, number):\r\n\t\treturn self.Lines[-number:]\r\n\tdef GetLinesByBlock(self, block):\r\n\t\treturn [x for x in self.Lines if x.Block == block]\r\n\tdef GetLinesByBlocks(self, blocks):\r\n\t\treturn [x for x in self.Lines if x.Block in blocks]\r\n\tdef GetLinesByDateTime(self, fromDateTime, toDateTime):\r\n\t\ttslist = []\r\n\t\tif fromDateTime and toDateTime: tslist = [x for x in self.GetLinesByType(\"JournalTimeStamp\") if x.DateTime > fromDateTime and x.DateTime < toDateTime]\r\n\t\telif fromDateTime: tslist = [x for x in self.GetLinesByType(\"JournalTimeStamp\") if x.DateTime > fromDateTime]\r\n\t\telif toDateTime: tslist = [x for x in self.GetLinesByType(\"JournalTimeStamp\") if x.DateTime < toDateTime]\r\n\t\treturn self.GetLinesByBlocks([x.Block for x in tslist])\r\n\tdef GetLinesByType(self, type):\r\n\t\treturn [x for x in self.Lines if x.Type == type]\r\n\tdef GetLinesByTypeAndProperty(self, type, prop, val):\r\n\t\treturn [x for x in self.Lines if x.Type == type and getattr(x, prop) == val]\r\n\tdef GetLinesByTypes(self, types):\r\n\t\treturn [x for x in self.Lines if x.Type in types]\r\n\tdef GetLoadedAssemblies(self):\r\n\t\tapimsgs = self.GetLinesByType(\"JournalAPIMessage\")\r\n\t\tloadedAssemblies = []\r\n\t\treplacedCommands = {}\r\n\t\tfor apimsg in apimsgs:\r\n\t\t\tif apimsg.MessageText.startswith(\"Starting\"):\r\n\t\t\t\tstartdata1 = apimsg.MessageText.split(\"Application: \")[-1].split(\", Class: \")\r\n\t\t\t\tstartdata2 = startdata1[-1].split(\", Vendor : \")\r\n\t\t\t\tstartdata3 = startdata2[-1].split(\", Assembly: \") \r\n\t\t\t\tappname = startdata1[0]\r\n\t\t\t\tclassname = startdata2[0]\r\n\t\t\t\tpath = startdata3[-1]\r\n\t\t\t\tvendor = startdata3[0]\r\n\t\t\t\tloadedAssemblies.append(LoadedAssembly(appname, classname, path, vendor, apimsg))\r\n\t\tfor apimsg in apimsgs:\r\n\t\t\tif apimsg.MessageText.startswith(\"Registering\") or apimsg.MessageText.startswith(\"Unregistering\") or apimsg.MessageText.startswith(\"API registering\") or apimsg.MessageText.startswith(\"API unregistering\"):\r\n\t\t\t\tregevt = apimsg.MessageText.split(\"by application \")[-1].rsplit(\" (\",1)\r\n\t\t\t\tappname = regevt[0]\r\n\t\t\t\tappguid = regevt[1][:-2]\r\n\t\t\t\tfoundByGUID = [x for x in loadedAssemblies if x.GUID == appguid]\r\n\t\t\t\tif len(foundByGUID) > 0: foundByGUID[0].Events.append(apimsg)\r\n\t\t\t\telse:\r\n\t\t\t\t\tfoundByName = [x for x in loadedAssemblies if x.Name == appname and x.GUID == None]\r\n\t\t\t\t\tif len(foundByName) > 0:\r\n\t\t\t\t\t\tfoundByName[0].GUID = appguid\r\n\t\t\t\t\t\tfoundByName[0].Events.append(apimsg)\r\n\t\t\telif apimsg.MessageText.startswith(\"Replacing\"):\r\n\t\t\t\treplname = apimsg.MessageText.split(\"from application '\",1)[-1].split(\"'\",1)[0]\r\n\t\t\t\treplcommand = apimsg.MessageText.split(\"Replacing command id '\",1)[-1].split(\"'\",1)[0]\r\n\t\t\t\tfoundByName = [x for x in loadedAssemblies if x.Name == replname]\r\n\t\t\t\tif len(foundByName) > 0: \r\n\t\t\t\t\tfoundByName[0].Events.append(apimsg)\r\n\t\t\t\t\treplacedCommands[replcommand] = foundByName[0]\r\n\t\t\telif apimsg.MessageText.startswith(\"Restoring\"):\r\n\t\t\t\trestcommand = apimsg.MessageText.split(\"Restoring command id '\",1)[-1].split(\"'\",1)[0]\r\n\t\t\t\tif restcommand in replacedCommands: replacedCommands[restcommand].Events.append(apimsg)\r\n\t\t\telif apimsg.MessageText.startswith(\"Added pushbutton\"):\r\n\t\t\t\tpbpath = apimsg.MessageText.split(\", \")[-1].replace(\"assembly: \",\"\").replace(\"assembly \",\"\")\r\n\t\t\t\tfoundByPath = [x for x in loadedAssemblies if x.Path == pbpath]\r\n\t\t\t\tif len(foundByPath) > 0: foundByPath[0].Events.append(apimsg)\r\n\t\t\t\telse:\r\n\t\t\t\t\tfoundByFilename = [x for x in loadedAssemblies if x.Filename == pbpath.rsplit(\"\\\\\",1)[-1]]\r\n\t\t\t\t\tif len(foundByFilename) > 0: foundByFilename[0].Events.append(apimsg)\r\n\t\t\telif apimsg.MessageText.startswith(\"System.\"):\r\n\t\t\t\texcguid = apimsg.MessageText.split(\"). Changes made by this handler are going to be discarded.\",1)[0].rsplit(\" (\",1)[-1]\r\n\t\t\t\tfoundByGUID = [x for x in loadedAssemblies if x.GUID == excguid]\r\n\t\t\t\tif len(foundByGUID) > 0: foundByGUID[0].Events.append(apimsg)\r\n\t\treturn loadedAssemblies\r\n\tdef GetMaxRAMPeak(self):\r\n\t\treturn max([x.RAMPeak for x in self.GetLinesByType('JournalMemoryMetrics')])\r\n\tdef GetMaxVMPeak(self):\r\n\t\treturn max([x.VMPeak for x in self.GetLinesByType('JournalMemoryMetrics')])\r\n\tdef GetMinRAMAvailable(self):\r\n\t\treturn min([x.RAMAvailable for x in self.GetLinesByType('JournalMemoryMetrics')])\r\n\tdef GetMinVMAvailable(self):\r\n\t\treturn min([x.VMAvailable for x in self.GetLinesByType('JournalMemoryMetrics')])\r\n\tdef GetSessionTime(self):\r\n\t\tts = self.GetLinesByType('JournalTimeStamp')\r\n\t\treturn ts[-1].DateTime - ts[0].DateTime\r\n\tdef GetStartupTime(self):\r\n\t\tfirst_ts = self.GetDateTimeByBlock(1)\r\n\t\t# Revit 2019 and later\r\n\t\tstartup1 = [x.Block for x in self.GetLinesByTypeAndProperty('JournalCommand', 'CommandID', 'ID_REVIT_MODEL_BROWSER_OPEN')]\r\n\t\tif len(startup1) > 0: return self.GetDateTimeByBlock(startup1[0]) - first_ts\r\n\t\telse:\r\n\t\t\t# Revit 2018 and earlier\r\n\t\t\tstartup2 = [x.Block for x in self.GetLinesByTypeAndProperty('JournalCommand', 'CommandID', 'ID_STARTUP_PAGE')]\r\n\t\t\tif len(startup2) > 0: return self.GetDateTimeByBlock(startup2[0]) - first_ts\r\n\t\t\telse:\r\n\t\t\t\t# DynamoAutomation journal playback\r\n\t\t\t\tstartup3 = [x.Block for x in self.GetLinesByTypeAndProperty('JournalCommand', 'CommandID', 'ID_FILE_MRU_FIRST')]\r\n\t\t\t\tif len(startup3) > 0: return self.GetDateTimeByBlock(startup3[0]) - first_ts\r\n\t\t\t\telse: \r\n\t\t\t\t\t# Session started by double-clicking project or family file\r\n\t\t\t\t\tstartup4 = [x.Block for x in self.GetLinesByTypeAndProperty('JournalCommand', 'CommandID', 'ID_REVIT_FILE_OPEN')]\r\n\t\t\t\t\tif len(startup4) > 0: return self.GetDateTimeByBlock(startup4[0]) - first_ts\r\n\t\t\t\t\telse: return None\r\n\tdef IsInPlaybackMode(self):\r\n\t\tif len([x for x in self.GetLinesByType('JournalTimeStamp') if x.Description.startswith(\"started journal file playback\")]) > 0: return True\r\n\t\telse: return False\r\n\tdef StripComments(self, preserveTimeStamps):\r\n\t\tdesiredTypes = ['JournalAddinEvent', 'JournalCommand', 'JournalData', 'JournalDirective', 'JournalKeyboardEvent', 'JournalMiscCommand', 'JournalMouseEvent', 'JournalUIEvent']\r\n\t\tif preserveTimeStamps: desiredTypes.append(\"JournalTimeStamp\")\r\n\t\treturn \"\\n\".join([x.RawText for x in self.Lines if x.Type in desiredTypes])\r\n\tdef WasPlaybackInterrupted(self):\r\n\t\tif len([x for x in self.GetLinesByType('JournalTimeStamp') if x.Description.startswith(\"stopped at line\") and x.Description.endswith(\"journal file playback\")]) > 0: return True\r\n\t\telse: return False\r\n\tdef WasSessionTerminatedProperly(self):\r\n\t\tif len([x for x in self.GetLinesByTypeAndProperty('JournalTimeStamp', 'Description', 'finished recording journal file')]) > 0: return True\r\n\t\telse: return False\r\n\r\nclass JournalLine:\r\n\tdef __init__(self, number, raw, block):\r\n\t\tself.Number = number\r\n\t\tself.RawText = raw\r\n\t\tself.Block = block\r\n\t\tself.Journal = None\r\n\t\tself.Type = 'JournalLine'\r\n\tdef __repr__(self):\r\n\t\treturn self.Type\r\n\tdef AllNext(self):\r\n\t\tif self.Journal.Lines.index(self) + 1 < self.Journal.LineCount: return self.Journal.Lines[self.Journal.Lines.index(self) + 1:]\r\n\t\telse: return []\r\n\tdef AllNextOfType(self, type):\r\n\t\treturn [x for x in self.AllNext() if x.Type == type]\r\n\tdef AllNextOfTypeAndProperty(self, type, prop, val):\r\n\t\treturn [x for x in self.AllNext() if x.Type == type and getattr(x, prop) == val]\r\n\tdef AllPrevious(self):\r\n\t\tif self.Journal.Lines.index(self) - 1 > -1: return self.Journal.Lines[:self.Journal.Lines.index(self)]\r\n\t\telse: return []\r\n\tdef AllPreviousOfType(self, type):\r\n\t\treturn [x for x in self.AllPrevious() if x.Type == type]\r\n\tdef AllPreviousOfTypeAndProperty(self, type, prop, val):\r\n\t\treturn [x for x in self.AllPrevious() if x.Type == type and getattr(x, prop) == val]\r\n\tdef GetDateTimeOfBlock(self):\r\n\t\treturn self.Journal.GetDateTimeByBlock(self.Block)\r\n\tdef Next(self):\r\n\t\tif self.Journal.Lines.index(self) + 1 < self.Journal.LineCount: return self.Journal.Lines[self.Journal.Lines.index(self) + 1]\r\n\t\telse: return None\r\n\tdef NextOfType(self, type):\r\n\t\tallnext = self.AllNextOfType(type)\r\n\t\tif len(allnext) > 0: return allnext[0]\r\n\t\telse: return None\r\n\tdef NextOfTypeAndProperty(self, type, prop, val):\r\n\t\tallnext = self.AllNextOfTypeAndProperty(type, prop, val)\r\n\t\tif len(allnext) > 0: return allnext[0]\r\n\t\telse: return None\r\n\tdef Previous(self):\r\n\t\tif self.Journal.Lines.index(self) - 1 > -1: return self.Journal.Lines[self.Journal.Lines.index(self) - 1]\r\n\t\telse: return None\r\n\tdef PreviousOfType(self, type):\r\n\t\tallprev = self.AllPreviousOfType(type)\r\n\t\tif len(allprev) > 0: return allprev[-1]\r\n\t\telse: return None\r\n\tdef PreviousOfTypeAndProperty(self, type, prop, val):\r\n\t\tallprev = self.AllPreviousOfTypeAndProperty(type, prop, val)\r\n\t\tif len(allprev) > 0: return allprev[-1]\r\n\t\telse: return None\r\n\r\nclass JournalAddinEvent(JournalLine):\r\n\tdef __init__(self, number, raw, block):\r\n\t\tJournalLine.__init__(self, number, raw, block)\r\n\t\tself.MessageText = None\r\n\t\tself.Type = 'JournalAddinEvent'\r\n\tdef __repr__(self):\r\n\t\treturn self.Type\r\n\r\nclass JournalAPIMessage(JournalLine):\r\n\tdef __init__(self, number, raw, block, is_error):\r\n\t\tJournalLine.__init__(self, number, raw, block)\r\n\t\tself.IsError = is_error\r\n\t\tself.MessageText = None\r\n\t\tself.MessageType = None\r\n\t\tself.Type = 'JournalAPIMessage'\r\n\tdef __repr__(self):\r\n\t\treturn self.Type\r\n\r\nclass JournalBasicFileInfo(JournalLine):\r\n\tdef __init__(self, number, raw, block):\r\n\t\tJournalLine.__init__(self, number, raw, block)\r\n\t\tself.Worksharing = None\r\n\t\tself.CentralModelPath = None\r\n\t\tself.LastSavePath = None\r\n\t\tself.Locale = None\r\n\t\tself.FileName = None\r\n\t\tself.Type = 'JournalBasicFileInfo'\r\n\tdef __repr__(self):\r\n\t\treturn self.Type\r\n\r\nclass JournalCommand(JournalLine):\r\n\tdef __init__(self, number, raw, block):\r\n\t\tJournalLine.__init__(self, number, raw, block)\r\n\t\tself.CommandType = None\r\n\t\tself.CommandDescription = None\r\n\t\tself.CommandID = None\r\n\t\tself.Type = 'JournalCommand'\r\n\tdef __repr__(self):\r\n\t\treturn self.Type\r\n\r\nclass JournalComment(JournalLine):\r\n\tdef __init__(self, number, raw, block):\r\n\t\tJournalLine.__init__(self, number, raw, block)\r\n\t\tself.Type = 'JournalComment'\r\n\tdef __repr__(self):\r\n\t\treturn self.Type\r\n\r\nclass JournalData(JournalLine):\r\n\tdef __init__(self, number, raw, block):\r\n\t\tJournalLine.__init__(self, number, raw, block)\r\n\t\tself.Key = None\r\n\t\tself.Values = []\r\n\t\tself.Type = 'JournalData'\r\n\tdef __repr__(self):\r\n\t\treturn self.Type\r\n\r\nclass JournalDirective(JournalLine):\r\n\tdef __init__(self, number, raw, block):\r\n\t\tJournalLine.__init__(self, number, raw, block)\r\n\t\tself.Key = None\r\n\t\tself.Values = []\r\n\t\tself.Type = 'JournalDirective'\r\n\tdef __repr__(self):\r\n\t\treturn self.Type\r\n\r\nclass JournalGUIResourceUsage(JournalLine):\r\n\tdef __init__(self, number, raw, block):\r\n\t\tJournalLine.__init__(self, number, raw, block)\r\n\t\tself.Available = None\r\n\t\tself.Used = None\r\n\t\tself.User = None\r\n\t\tself.Type = 'JournalGUIResourceUsage'\r\n\tdef __repr__(self):\r\n\t\treturn self.Type\r\n\r\nclass JournalKeyboardEvent(JournalLine):\r\n\tdef __init__(self, number, raw, block):\r\n\t\tJournalLine.__init__(self, number, raw, block)\r\n\t\tself.Key = None\r\n\t\tself.Type = 'JournalKeyboardEvent'\r\n\tdef __repr__(self):\r\n\t\treturn self.Type\r\n\t\t\r\nclass JournalMemoryMetrics(JournalLine):\r\n\tdef __init__(self, number, raw, block):\r\n\t\tJournalLine.__init__(self, number, raw, block)\r\n\t\tself.VMAvailable = None\r\n\t\tself.VMUsed = None\r\n\t\tself.VMPeak = None\r\n\t\tself.RAMAvailable = None\r\n\t\tself.RAMUsed = None\r\n\t\tself.RAMPeak = None\r\n\t\tself.Type = 'JournalMemoryMetrics'\r\n\tdef __repr__(self):\r\n\t\treturn self.Type\r\n\r\nclass JournalMiscCommand(JournalLine):\r\n\tdef __init__(self, number, raw, block):\r\n\t\tJournalLine.__init__(self, number, raw, block)\r\n\t\tself.Type = 'JournalMiscCommand'\r\n\tdef __repr__(self):\r\n\t\treturn self.Type\r\n\r\nclass JournalMouseEvent(JournalLine):\r\n\tdef __init__(self, number, raw, block):\r\n\t\tJournalLine.__init__(self, number, raw, block)\r\n\t\tself.MouseEventType = None\r\n\t\tself.Data = []\r\n\t\tself.Type = 'JournalMouseEvent'\r\n\tdef __repr__(self):\r\n\t\treturn self.Type\r\n\t\t\r\nclass JournalSystemInformation(JournalLine):\r\n\tdef __init__(self, number, raw, block, sysinfotype):\r\n\t\tJournalLine.__init__(self, number, raw, block)\r\n\t\tself.SystemInformationType = sysinfotype\r\n\t\tself.ItemNumber = None\r\n\t\tself.Key = None\r\n\t\tself.Value = None\r\n\t\tself.Type = 'JournalSystemInformation'\r\n\tdef __repr__(self):\r\n\t\treturn self.Type\r\n\t\t\r\nclass JournalTimeStamp(JournalLine):\r\n\tdef __init__(self, number, raw, block):\r\n\t\tJournalLine.__init__(self, number, raw, block)\r\n\t\tself.TimeStampType = None\r\n\t\tself.DateTime = None\r\n\t\tself.Description = None\r\n\t\tself.Type = 'JournalTimeStamp'\r\n\tdef __repr__(self):\r\n\t\treturn self.Type\r\n\r\nclass JournalUIEvent(JournalLine):\r\n\tdef __init__(self, number, raw, block):\r\n\t\tJournalLine.__init__(self, number, raw, block)\r\n\t\tself.UIEventType = None\r\n\t\tself.Data = []\r\n\t\tself.Type = 'JournalUIEvent'\r\n\tdef __repr__(self):\r\n\t\treturn self.Type\r\n\r\nclass JournalWorksharingEvent(JournalLine):\r\n\tdef __init__(self, number, raw, block):\r\n\t\tJournalLine.__init__(self, number, raw, block)\r\n\t\tself.SessionID = None\r\n\t\tself.DateTime = None\r\n\t\tself.Text = None\r\n\t\tself.Type = 'JournalWorksharingEvent'\r\n\tdef __repr__(self):\r\n\t\treturn self.Type\r\n\r\nclass LoadedAssembly:\r\n\tdef __init__(self, name, classname, path, vendor, initialEvent):\r\n\t\tself.Name = name\r\n\t\tself.Class = classname\r\n\t\tself.Path = path\r\n\t\tself.Filename = path.split(\"\\\\\")[-1]\r\n\t\tself.Vendor = vendor\r\n\t\tself.GUID = None\r\n\t\tself.Events = [initialEvent]\r\n\tdef __repr__(self):\r\n\t\treturn \"LoadedAssembly\"\r\n\r\ndef JournalFromPath(path):\r\n\ttry:\r\n\t\tprocessing_started = time.time()\r\n\t\tlineObjs = []\r\n\t\tjVersion = None\r\n\t\tjUsername = None\r\n\t\tjMachineName = None\r\n\t\tjOSVersion = None\r\n\t\tjPath = None\r\n\t\tsysinfoStarted = False\r\n\t\tcommandCount = 0\r\n\t\ti = 1\r\n\t\tb = 0\r\n\t\t# Round 1: Create line objects\r\n\t\twith open(path, 'r') as lines:\r\n\t\t\tfor line in lines:\r\n\t\t\t\tline = line.lstrip().rstrip('\\n').rstrip('x00')\r\n\t\t\t\t# ignore empty lines\r\n\t\t\t\tif len(line) < 2: pass\r\n\t\t\t\telif line.startswith(\"'C \") or line.startswith(\"'H \") or line.startswith(\"'E \"):\r\n\t\t\t\t\tb += 1\r\n\t\t\t\t\tlineObjs.append(JournalTimeStamp(i,line,b))\r\n\t\t\t\telif \":< API_SUCCESS { \" in line: lineObjs.append(JournalAPIMessage(i,line,b,False))\r\n\t\t\t\telif \":< API_ERROR { \" in line: lineObjs.append(JournalAPIMessage(i,line,b,True))\r\n\t\t\t\telif \":: Delta VM: \" in line or line.startswith(\"' 0:< Initial VM: \"): lineObjs.append(JournalMemoryMetrics(i,line,b))\r\n\t\t\t\telif \":< GUI Resource Usage GDI: \" in line: lineObjs.append(JournalGUIResourceUsage(i,line,b))\r\n\t\t\t\telif line.startswith(\"' [Jrn.BasicFileInfo]\"): lineObjs.append(JournalBasicFileInfo(i,line,b))\r\n\t\t\t\telif line.startswith(\"Jrn.Data \"): lineObjs.append(JournalData(i,line,b))\r\n\t\t\t\telif line.startswith(\"Jrn.Directive \"): lineObjs.append(JournalDirective(i,line,b))\r\n\t\t\t\telif line.startswith(\"Jrn.Command \"):\r\n\t\t\t\t\tlineObjs.append(JournalCommand(i,line,b))\r\n\t\t\t\t\t# We need to count commands so we can grab JournalSystemInformation lines\r\n\t\t\t\t\tif commandCount < 2: commandCount += 1\r\n\t\t\t\telif line.startswith(\"Jrn.Key \"): lineObjs.append(JournalKeyboardEvent(i,line,b))\r\n\t\t\t\telif line.startswith(\"Jrn.AddInEvent \"): lineObjs.append(JournalAddinEvent(i,line,b))\r\n\t\t\t\telif line.startswith('Jrn.Wheel') or line.startswith('Jrn.MouseMove') or line.startswith('Jrn.LButtonUp') or line.startswith('Jrn.LButtonDown') or line.startswith('Jrn.LButtonDblClk') or line.startswith('Jrn.MButtonUp') or line.startswith('Jrn.MButtonDown') or line.startswith('Jrn.MButtonDblClk') or line.startswith('Jrn.RButtonUp') or line.startswith('Jrn.RButtonDown') or line.startswith('Jrn.RButtonDblClk') or line.startswith('Jrn.Scroll'):\r\n\t\t\t\t\tlineObjs.append(JournalMouseEvent(i,line,b))\r\n\t\t\t\telif line.startswith('Jrn.Activate') or line.startswith('Jrn.AppButtonEvent') or line.startswith('Jrn.Browser') or line.startswith('Jrn.CheckBox') or line.startswith('Jrn.Close') or line.startswith('Jrn.ComboBox') or line.startswith('Jrn.DropFiles') or line.startswith('Jrn.Edit') or line.startswith('Jrn.Grid') or line.startswith('Jrn.ListBox') or line.startswith('Jrn.Maximize') or line.startswith('Jrn.Minimize') or line.startswith('Jrn.PropertiesPalette') or line.startswith('Jrn.PushButton') or line.startswith('Jrn.RadioButton') or line.startswith('Jrn.RibbonEvent') or line.startswith('Jrn.SBTrayAction') or line.startswith('Jrn.Size') or line.startswith('Jrn.SliderCtrl') or line.startswith('Jrn.TabCtrl') or line.startswith('Jrn.TreeCtrl') or line.startswith('Jrn.WidgetEvent'):\r\n\t\t\t\t\tlineObjs.append(JournalUIEvent(i,line,b))\r\n\t\t\t\telif \":< SLOG $\" in line: lineObjs.append(JournalWorksharingEvent(i,line,b))\r\n\t\t\t\t# append linebreaks to previous line\r\n\t\t\t\telif lineObjs[-1].RawText[-1] == \"_\": lineObjs[-1].RawText = lineObjs[-1].RawText[:-1] + line\r\n\t\t\t\t# append linebreaks in commands\r\n\t\t\t\telif line[0] == \",\": lineObjs[-1].RawText = (lineObjs[-1].RawText + line).replace(\" _,\",\",\")\r\n\t\t\t\telif line[0] == \"'\":\r\n\t\t\t\t\t# append linebreaks in API Messages\r\n\t\t\t\t\tif line[1] != \" \" and lineObjs[-1].Type == 'JournalAPIMessage' and not lineObjs[-1].RawText.endswith(\"}\"): lineObjs[-1].RawText += \" \" + line[1:]\r\n\t\t\t\t\telif sysinfoStarted:\r\n\t\t\t\t\t\tif \":< PROCESSOR INFORMATION:\" in line: \r\n\t\t\t\t\t\t\tsysinfoType = \"Processor\"\r\n\t\t\t\t\t\t\tlineObjs.append(JournalComment(i,line,b))\r\n\t\t\t\t\t\telif \":< VIDEO CONTROLLER INFORMATION:\" in line: \r\n\t\t\t\t\t\t\tsysinfoType = \"VideoController\"\r\n\t\t\t\t\t\t\tlineObjs.append(JournalComment(i,line,b))\r\n\t\t\t\t\t\telif \":< PRINTER INFORMATION:\" in line: \r\n\t\t\t\t\t\t\tsysinfoType = \"Printer\"\r\n\t\t\t\t\t\t\tlineObjs.append(JournalComment(i,line,b))\r\n\t\t\t\t\t\telif \":< PRINTER CONFIGURATION INFORMATION:\" in line: \r\n\t\t\t\t\t\t\tsysinfoType = \"PrinterConfiguration\"\r\n\t\t\t\t\t\t\tlineObjs.append(JournalComment(i,line,b))\r\n\t\t\t\t\t\telif \" INFORMATION:\" in line: \r\n\t\t\t\t\t\t\tsysinfoType = \"Unknown\"\r\n\t\t\t\t\t\t\tlineObjs.append(JournalComment(i,line,b))\r\n\t\t\t\t\t\telif \":<    \" in line: \r\n\t\t\t\t\t\t\tif line.split(\":<    \")[-1].startswith(\" \"): lineObjs.append(JournalComment(i,line,b))\r\n\t\t\t\t\t\t\telse: lineObjs.append(JournalSystemInformation(i,line,b,sysinfoType))\r\n\t\t\t\t\t\telse: lineObjs.append(JournalComment(i,line,b))\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\tif not sysinfoStarted:\r\n\t\t\t\t\t\t\tif \":< OPERATING SYSTEM INFORMATION:\" in line: \r\n\t\t\t\t\t\t\t\tsysinfoStarted = True\r\n\t\t\t\t\t\t\t\tsysinfoType = 'OperatingSystem'\r\n\t\t\t\t\t\tlineObjs.append(JournalComment(i,line,b))\r\n\t\t\t\telse: lineObjs.append(JournalMiscCommand(i,line,b))\r\n\t\t\t\ti += 1\t\t\t\t\r\n\t\tjBlockCount = b\t\r\n\t\t# Round 2: Process raw multiline text and fill type-specific attributes\r\n\t\tmachineNameFound = False\r\n\t\tOSVersionFound = False\r\n\t\tsysinfoItem = 0\r\n\t\tfor line in lineObjs:\r\n\t\t\tif line.Type == 'JournalAPIMessage':\r\n\t\t\t\tline.MessageText = line.RawText.split(\"{ \")[1].split(\" }\")[0].strip()\r\n\t\t\t\tif line.MessageText.startswith(\"Registered an external service\"): line.MessageType = \"RegisteredExternalService\"\r\n\t\t\t\telif line.MessageText.startswith(\"Registered an external server\") or line.MessageText.startswith(\"An external server has been registered\"): line.MessageType = \"RegisteredExternalServer\"\r\n\t\t\t\telif line.MessageText.startswith(\"Starting External DB Application\"): line.MessageType = \"StartingExternalDBApp\"\r\n\t\t\t\telif line.MessageText.startswith(\"Starting External Application\"): line.MessageType = \"StartingExternalApp\"\r\n\t\t\t\telif line.MessageText.startswith(\"Registering\"): line.MessageType = \"RegisteringEvent\"\r\n\t\t\t\telif line.MessageText.startswith(\"Replacing command id\"): line.MessageType = \"ReplacingCommandID\"\r\n\t\t\t\telif line.MessageText.startswith(\"API registering command\"): line.MessageType = \"RegisteringCommandEvent\"\r\n\t\t\t\telif line.MessageText.startswith(\"Added pushbutton\"): line.MessageType = \"AddedPushbutton\"\r\n\t\t\t\telif line.MessageText.startswith(\"Unregistering\"): line.MessageType = \"UnregisteringEvent\"\r\n\t\t\t\telif line.MessageText.startswith(\"Restoring command id\"): line.MessageType = \"RestoringCommandID\"\r\n\t\t\t\telif line.MessageText.startswith(\"API unregistering command\"): line.MessageType = \"UnregisteringCommandEvent\"\r\n\t\t\t\telif line.MessageText.startswith(\"System.\"): line.MessageType = \"Exception\"\r\n\t\t\t\telse: line.MessageType = \"Unknown\"\r\n\t\t\telif line.Type == 'JournalDirective':\r\n\t\t\t\td1 = line.RawText.split('\"  , ')\r\n\t\t\t\tif len(d1) > 1:\r\n\t\t\t\t\tKeyCandidate = d1[0][15:]\r\n\t\t\t\t\t# Allow for different formatting in Revit 2022\r\n\t\t\t\t\tif KeyCandidate.startswith('\"'): KeyCandidate = KeyCandidate[1:]\r\n\t\t\t\t\tline.Key = KeyCandidate\r\n\t\t\t\t\tfor d2 in d1[1].split(\",\"):\r\n\t\t\t\t\t\tline.Values.append(d2.strip().replace('\"',''))\r\n\t\t\t\telse:\r\n\t\t\t\t\t# Very rare case where a multiline error msg is inserted between key and values\r\n\t\t\t\t\td1 = line.RawText.split('\"')\r\n\t\t\t\t\tline.Key = d1[1]\r\n\t\t\t\t\tline.Values.append(d1[2])\r\n\t\t\t\t# Add Revit version to journal metadata\r\n\t\t\t\tif line.Key == 'Version': jVersion = int(line.Values[0][:4])\r\n\t\t\t\t# Add username to journal metadata\r\n\t\t\t\telif line.Key == 'Username': jUsername = line.Values[0]\r\n\t\t\telif line.Type == 'JournalData':\r\n\t\t\t\td1 = line.RawText.split('\"  , ')\r\n\t\t\t\tKeyCandidate = d1[0][10:]\r\n\t\t\t\t# Allow for different formatting in Revit 2022\r\n\t\t\t\tif KeyCandidate.startswith('\"'): KeyCandidate = KeyCandidate[1:]\r\n\t\t\t\tline.Key = KeyCandidate\r\n\t\t\t\t# if this line is cut off don't try to extract values\r\n\t\t\t\tif len(d1) > 1:\r\n\t\t\t\t\tfor d2 in d1[1].split(\",\"):\r\n\t\t\t\t\t\tline.Values.append(d2.strip().replace('\"',''))\r\n\t\t\telif line.Type == 'JournalWorksharingEvent':\r\n\t\t\t\tws = line.RawText.split(':< SLOG ')[-1].split()\r\n\t\t\t\tline.SessionID = ws[0]\r\n\t\t\t\tline.DateTime = time.strptime(ws[1] + \" \" + ws[2])\r\n\t\t\t\tline.Text = ' '.join(ws[3:])\r\n\t\t\telif line.Type == 'JournalSystemInformation':\r\n\t\t\t\tsi = line.RawText.split(':<    ')[-1].split(' : ')\r\n\t\t\t\tline.Key = si[0]\r\n\t\t\t\tif len(si) > 1: line.Value = si[1]\r\n\t\t\t\telse: line.Value = None\r\n\t\t\t\tif line.SystemInformationType == \"Processor\" and line.Key == \"AddressWidth\": sysinfoItem += 1\r\n\t\t\t\telif line.SystemInformationType == \"VideoController\" and line.Key == \"AdapterCompatibility\": sysinfoItem += 1\r\n\t\t\t\telif line.SystemInformationType == \"Printer\" and line.Key == \"Caption\": sysinfoItem += 1\r\n\t\t\t\telif line.SystemInformationType == \"PrinterConfiguration\" and line.Key == \"Color\": sysinfoItem += 1\r\n\t\t\t\tif not OSVersionFound:\r\n\t\t\t\t\tif \"Caption :\" in line.RawText:\r\n\t\t\t\t\t\tjOSVersion = line.RawText.split(\":\")[-1].strip()\r\n\t\t\t\t\t\tOSVersionFound = True\r\n\t\t\t\tline.ItemNumber = sysinfoItem\r\n\t\t\telif line.Type == 'JournalCommand':\r\n\t\t\t\tc1 = line.RawText.replace(\"  \",\" \").split('\" , \"')\r\n\t\t\t\tline.CommandType = c1[0][13:]\r\n\t\t\t\tc2 = c1[1].split(\" , \")\r\n\t\t\t\tline.CommandDescription = c2[0]\r\n\t\t\t\tCommandIDCandidate = c2[1][:-1]\r\n\t\t\t\t# Allow for different formatting in Revit 2022\r\n\t\t\t\tif CommandIDCandidate.endswith('\"'): CommandIDCandidate = CommandIDCandidate = CommandIDCandidate[:-1]\r\n\t\t\t\tline.CommandID = CommandIDCandidate\r\n\t\t\telif line.Type == 'JournalMouseEvent':\r\n\t\t\t\tm1 = line.RawText.split(\" \",1)\r\n\t\t\t\tline.MouseEventType = m1[0][4:].strip()\r\n\t\t\t\tfor m2 in m1[1].split(\",\"):\r\n\t\t\t\t\tpotential_int = m2.strip().rstrip('\\x00')\r\n\t\t\t\t\t# don't try converting broken lines\r\n\t\t\t\t\tif len(potential_int) > 0: line.Data.append(int(potential_int))\r\n\t\t\telif line.Type == 'JournalKeyboardEvent': line.Key = line.RawText.split('\"')[1]\r\n\t\t\telif line.Type == 'JournalBasicFileInfo':\r\n\t\t\t\tbfi = map(list, zip(*[x.split(\":\",1) for x in line.RawText[22:].split(\"Rvt.Attr.\")[1:]]))\r\n\t\t\t\tbfidict = dict(zip(bfi[0], [x.strip() for x in bfi[1]]))\r\n\t\t\t\tif bfidict[\"Worksharing\"] != \"\": line.Worksharing = bfidict[\"Worksharing\"]\r\n\t\t\t\tif bfidict[\"CentralModelPath\"] != \"\": line.CentralModelPath = bfidict[\"CentralModelPath\"]\r\n\t\t\t\tif bfidict[\"LastSavePath\"] != \"\": \r\n\t\t\t\t\tline.LastSavePath = bfidict[\"LastSavePath\"]\r\n\t\t\t\t\tline.FileName = bfidict[\"LastSavePath\"].split(\"\\\\\")[-1]\r\n\t\t\t\tif bfidict[\"LocaleWhenSaved\"] != \"\": line.Locale = bfidict[\"LocaleWhenSaved\"]\r\n\t\t\telif line.Type == 'JournalGUIResourceUsage':\r\n\t\t\t\tg2 = []\r\n\t\t\t\tfor g1 in line.RawText.split(\",\"):\r\n\t\t\t\t\tg2.append(int(g1.strip().split()[-1]))\r\n\t\t\t\tline.Available = g2[0]\r\n\t\t\t\tline.Used = g2[1]\r\n\t\t\t\tline.User = g2[2]\r\n\t\t\telif line.Type == 'JournalUIEvent':\r\n\t\t\t\td1 = line.RawText.split(\" \",1)\r\n\t\t\t\tline.UIEventType = d1[0][4:]\r\n\t\t\t\tif line.UIEventType not in (\"Maximize\", \"Minimize\", \"Restore\"):\r\n\t\t\t\t\tfor d2 in d1[1].split(\",\"):\r\n\t\t\t\t\t\td3 = d2.strip().replace('\"','').strip()\r\n\t\t\t\t\t\tif line.UIEventType in (\"RibbonEvent\", \"SBTrayAction\"):\r\n\t\t\t\t\t\t\tfor d4 in d3.split(\":\"):\r\n\t\t\t\t\t\t\t\td4 = d4.strip()\r\n\t\t\t\t\t\t\t\tif d4 != \"\": line.Data.append(d4)\r\n\t\t\t\t\t\telif line.UIEventType == \"Browser\":\r\n\t\t\t\t\t\t\tfor d4 in d3.split(\">>\"):\r\n\t\t\t\t\t\t\t\td4 = d4.strip()\r\n\t\t\t\t\t\t\t\tif d4 != \"\": line.Data.append(d4)\r\n\t\t\t\t\t\telif d3 != \"\": line.Data.append(d3)\r\n\t\t\telif line.Type == 'JournalAddinEvent': line.MessageText = line.RawText.split('\"')[3]\r\n\t\t\telif line.Type == 'JournalTimeStamp':\r\n\t\t\t\tline.TimeStampType = line.RawText[1]\r\n\t\t\t\tts1 = line.RawText.split(\";\")\r\n\t\t\t\t# if this line is cut off don't try to extract datetime or description\r\n\t\t\t\tif len(ts1) > 1: \r\n\t\t\t\t\tline.DateTime = time.strptime(ts1[0][3:])\r\n\t\t\t\t\t# formatting until Revit 2019\r\n\t\t\t\t\tif ':<' in ts1[1]: line.Description = ts1[1][7:].strip()\r\n\t\t\t\t\t# formatting as of Revit 2020\r\n\t\t\t\t\telse: line.Description = ts1[1][2:].strip()\r\n\t\t\telif line.Type == 'JournalMemoryMetrics':\r\n\t\t\t\tif \"Initial VM\" in line.RawText: m1 = line.RawText.split(\":\",2)[2].replace(\";\",\"\").split()\r\n\t\t\t\telse: m1 = line.RawText.split(\":\",6)[6].split()\r\n\t\t\t\tm3 = []\r\n\t\t\t\tm4 = []\r\n\t\t\t\tfor m2 in m1:\r\n\t\t\t\t\tif m2.isdigit(): m3.append(int(m2))\r\n\t\t\t\t\telif m2 in (\"Avail\",\"Used\",\"Peak\"): m4.append(m2)\r\n\t\t\t\tif len(m3) > 0: line.VMAvailable = m3[0]\r\n\t\t\t\tif len(m3) > 1: line.VMUsed = m3[1]\r\n\t\t\t\tif len(m3) == 6:\t\t\r\n\t\t\t\t\tline.VMPeak = m3[2]\r\n\t\t\t\t\tline.RAMAvailable = m3[3]\r\n\t\t\t\t\tline.RAMUsed = m3[4]\r\n\t\t\t\t\tline.RAMPeak = m3[5]\r\n\t\t\t\telif len(m3) == 5:\r\n\t\t\t\t\tif m4[2] == \"Avail\":\r\n\t\t\t\t\t\tline.VMPeak = None\r\n\t\t\t\t\t\tline.RAMAvailable = m3[2]\r\n\t\t\t\t\t\tline.RAMUsed = m3[3]\r\n\t\t\t\t\t\tline.RAMPeak = m3[4]\r\n\t\t\t\t\telif m4[2] == \"Peak\":\r\n\t\t\t\t\t\tline.VMPeak = m3[2]\r\n\t\t\t\t\t\tline.RAMAvailable = m3[3]\r\n\t\t\t\t\t\tline.RAMUsed = m3[4]\r\n\t\t\t\t\t\tline.RAMPeak = None\r\n\t\t\t\telif len(m3) == 4:\r\n\t\t\t\t\tline.VMPeak = None\r\n\t\t\t\t\tline.RAMAvailable = m3[2]\r\n\t\t\t\t\tline.RAMUsed = m3[3]\r\n\t\t\t\t\tline.RAMPeak = None\r\n\t\t\telif line.Type == 'JournalComment':\r\n\t\t\t\tif \"this journal =\" in line.RawText: jPath = line.RawText.split(\"=\")[1].strip()\r\n\t\t\t\telif line.RawText.startswith(\"' Build:\"): jBuild = line.RawText.split(\":\")[1].strip()\r\n\t\t\t\telif line.RawText.startswith(\"' Branch:\"): jBranch = line.RawText.split(\":\")[1].strip()\r\n\t\t\t\telif not machineNameFound:\r\n\t\t\t\t\tif \"Additional IP address/name found for host\" in line.RawText:\r\n\t\t\t\t\t\tjMachineName = line.RawText.split(\":\")[1].split(\" \")[-1]\r\n\t\t\t\t\t\tmachineNameFound = True\r\n\t\t# Create journal object\r\n\t\tjournal = Journal(lineObjs, jVersion, jUsername, jBlockCount, jPath, jBuild, jBranch, jMachineName, jOSVersion)\r\n\t\tfor line in journal.Lines:\r\n\t\t\tline.Journal = journal\r\n\t\t# Compute total processing time of this node\r\n\t\tjournal.ProcessingTime = time.time() - processing_started\r\n\t\treturn journal\r\n\texcept:\r\n\t\timport traceback\r\n\t\tif line and hasattr(line, \"RawText\"):\r\n\t\t\treturn traceback.format_exc() + '\\nCould not parse line:\\n' + line.RawText\r\n\t\telse: return traceback.format_exc()\r\n\r\nif isinstance(IN[0], list): OUT = [JournalFromPath(x) for x in IN[0]]\r\nelse: OUT = JournalFromPath(IN[0])",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "134d3b80aeb2404985bcbaf96cd22970",
      "Inputs": [
        {
          "Id": "8ac645556d5a4f2aa056af6e50537897",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "22df99ad10d74b74a94bf469485ae697",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Führt ein eingebettetes Python-Skript aus."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "path",
        "TypeName": "var",
        "TypeRank": -1,
        "DefaultValue": null,
        "Description": ""
      },
      "Id": "a84378b6ae0847b39869b75a334d8d48",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "2e9807e7fc094ae18a7cbed616d6acbb",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Ein Funktionsparameter zur Verwendung mit benutzerdefinierten Blöcken.\r\n\r\nSie können den Typ und den Vorgabewert für den Parameter angeben, z. B.\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "NodeType": "OutputNode",
      "ElementResolver": null,
      "Symbol": "journal",
      "Id": "0838d503bed74116941d6ffa455e5f45",
      "Inputs": [
        {
          "Id": "de85c1c635c445d1a8f4909f9e737d89",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "Eine Funktionsausgabe zur Verwendung mit benutzerdefinierten Blöcken"
    }
  ],
  "Connectors": [
    {
      "Start": "22df99ad10d74b74a94bf469485ae697",
      "End": "de85c1c635c445d1a8f4909f9e737d89",
      "Id": "d63a9af39ad242569e5499601d98cf6a"
    },
    {
      "Start": "2e9807e7fc094ae18a7cbed616d6acbb",
      "End": "8ac645556d5a4f2aa056af6e50537897",
      "Id": "09ee97754475416681b160d81f38c297"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Author": "None provided",
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": false,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.12.0.5650",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Hintergrundvorschau",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "134d3b80aeb2404985bcbaf96cd22970",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 239.5,
        "Y": 0.0
      },
      {
        "ShowGeometry": true,
        "Name": "Input",
        "Id": "a84378b6ae0847b39869b75a334d8d48",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -14.5,
        "Y": 0.0
      },
      {
        "ShowGeometry": true,
        "Name": "Output",
        "Id": "0838d503bed74116941d6ffa455e5f45",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 463.5,
        "Y": 0.0
      }
    ],
    "Annotations": [],
    "X": 0.0,
    "Y": 0.0,
    "Zoom": 1.0
  }
}